apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    /*maven { url "https://jitpack.io" }
    mavenCentral()*/
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    kapt 'com.github.bumptech.glide:compiler:4.6.1'
    compile 'com.github.bumptech.glide:glide:4.7.1'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'androidx.appcompat:appcompat:1.0.0'
    compile files('libs/Java-WebSocket-1.3.9.jar')
    compile 'androidx.recyclerview:recyclerview:1.0.0'
    compile 'androidx.cardview:cardview:1.0.0'
    compile 'com.google.android.material:material:1.0.0'
    compile 'com.squareup.retrofit2:retrofit:2.4.0'
    compile 'com.squareup.retrofit2:converter-gson:2.4.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    compile 'io.paperdb:paperdb:2.6'
    compile 'org.jsoup:jsoup:1.10.3'
    //compile 'org.webrtc:google-webrtc:1.0.24465'
    //compile 'org.jetbrains.kotlin:kotlin-reflect:1.2.70'
    compile 'org.apache.httpcomponents:httpclient-android:4.3.5.1'
    compile('org.apache.httpcomponents:httpmime:4.3') {
        exclude module: "httpclient"
    }
    //    implementation 'org.java-websocket:Java-WebSocket:1.3.9'
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    useLibrary 'org.apache.http.legacy'
    configurations {
        all*.exclude module: 'servlet-api'
    }
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 176
        versionName "1.76.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        group = 'com.fugu' // package name
        version = '1.76.1' // Change this to match your version number
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
//    dexOptions {
//        jumboMode true
//    }
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//        kotlinOptions.jvmTarget = "1.8"
//    }
//
//    androidExtensions {
//        experimental = true
//    }
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath()
            .join(File.pathSeparator))
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}
generateJavadocsJar.dependsOn generateJavadocs
artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}
//pom.withXml {
//    def dependenciesNode = asNode().appendNode('dependencies')
//
//    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
//    configurations.compile.allDependencies.each {
//        def dependencyNode = dependenciesNode.appendNode('dependency')
//        dependencyNode.appendNode('groupId', it.group)
//        dependencyNode.appendNode('artifactId', it.name)
//        dependencyNode.appendNode('version', it.version)
//    }
//}

publishing {
    publications {
        maven(MavenPublication) {
            //groupId 'cz.example'
            //artifactId 'custom-artifact'
            //version = android.defaultConfig.versionName

//            artifact bundleRelease
//            artifact androidJavadocsJar
//            artifact androidSourcesJar

            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')

                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                // List all "compile" dependencies (for old Gradle)
                configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "api" dependencies (for new Gradle) as "compile" dependencies
                configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                //configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }
}

bintray {
    user = 'bhavyarattan'
    key = '76b30696dc7c87fe5794dc9925a88844526ccf67'
    pkg {
        repo = 'fugu'
        name = 'com.fugu'

        version {
            name = '1.76.1'
            desc = 'Audio and Video removed and user security'
            released = new Date()
            vcsTag = '1.76.1'
        }

        licenses = ['Apache-2.0']
        vcsUrl = 'https://git.clicklabs.in/fugu/fugu-android.git'
    }
    configurations = ['archives']
}
